/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asciiconverter;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingWorker;

/**
 *
 * @author Willhelmina
 */
public class BackgroundImageProcess extends SwingWorker<String,BufferedImage>{
    
    
    
    
    File file;//see coment on constructor
    //GuiForm ctx;//hard coding the reference here isn't exactly what I want but it's convenient
    
    /*
    this constructor doesn't work, wouldn't read the second arg, no idea why
    doing it this way creates a couple unneaded references, try overriding execute
    BackgroundImageProcess(File _file, GuiForm _ctx){
        file = _file;
        addPropertyChangeListener(_ctx);
    }
    */
    
    //and so we have this constructor, the only dif I can see is that this one was auto generated by netbeans
    BackgroundImageProcess(File _file, PropertyChangeListener pcl) {
        file = _file;
        addPropertyChangeListener(pcl);
    }
            
    @Override
    protected String doInBackground(){
        
        String doing = "processing";
        
        //load files, create images for icons, process pixel data to ascii
        try{
            StringBuilder outTxt = new StringBuilder("");
            BufferedImage imgA = ImageIO.read(file);
            BufferedImage imgB = toGrey(imgA);
            firePropertyChange("iconA", null, new ImageIcon(imgA));
            System.out.println("prop1 fired");
            firePropertyChange("iconB", null, new ImageIcon(imgB));
            System.out.println("prop2 fired");
            
            
            //ascii conversion
            //doesn't work exactly the way I'd like but close enough
            //and I'm not sure exactly what the problem is
            for (int y = 0; y < imgB.getHeight(); y++){
                if(y>0){
                    outTxt.append("\n");
                }
                for (int x = 0; x <imgB.getWidth(); x++){
                    if((imgB.getRGB(x, y) & 0xff) < 85){
                        outTxt.append(".");
                    }else if((imgB.getRGB(x, y) & 0xff) < 150){
                        if(x%2==0){
                            outTxt.append("(");
                        }else{
                            outTxt.append(")");
                        }
                    }else if((imgB.getRGB(x, y) & 0xff) < 206){
                        if(x%2==0){
                            outTxt.append("(");
                        }else{
                            outTxt.append(")");
                        }
                    }else if((imgB.getRGB(x, y) & 0xff) < 225){
                        if((x+y)%2 == 0){
                            outTxt.append("/");
                        }else{
                            outTxt.append("\\");
                        }
                        
                    }
                    else{
                        outTxt.append("#");
                    }
                }
            }
            
            //why I had to use the the property change listener I'm not sure
            firePropertyChange("txt1", null, outTxt.toString());
        }catch (IOException ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
        }
        System.out.println("BackgroundImageProcess"+ " " + doing);
        return doing;
    }
    
    @Override 
    protected void done(){
        System.out.println("done with cat boobs");
    
    }
    
    //process color image to grayscale
    BufferedImage toGrey(BufferedImage img){
        BufferedImage _img = new BufferedImage(
                img.getWidth(), 
                img.getHeight(), 
                BufferedImage.TYPE_BYTE_GRAY);
        
        Graphics g = _img.getGraphics();  
        g.drawImage(img, 0, 0, null);  
        g.dispose();  
        
        return _img;
    }
    
}
